(in-package :narvius.game.daen)

(defclass level ()
  ((name :initarg :name :accessor @name)
   (difficulty :initarg :difficulty :accessor @difficulty)
   (duration :initarg :duration :accessor @duration)
   (directors :initarg :directors :accessor @directors)))

(defun create-level (name difficulty duration)
  (make-instance 'level :name name :difficulty difficulty :duration duration))

(defun set-directors (level directors)
  (setf (@directors level) (mapcar #'copy-director directors)))

(defvar *as-prototype* nil)

(defmacro deflevel ((name difficulty duration) &body body)
  (let ((level (gensym "level"))
	(dir-list (gensym "dirlist")))
    `(macrolet ((create (name &key (args nil) (x 0) (y 0) (vx 0) (vy 0) (delay 0))
		  `(funcall spawn ,name :args ,args :x ,x :y ,y :vx ,vx :vy ,vy :delay ,delay)))
       (let* ((,level (create-level ,name ,difficulty ,duration))
	      (,dir-list nil)
	      (spawn #'(lambda (dir &key (x 300) (y 300) (vx 0) (vy 0)
				(args nil) (delay 0) (as-prototype *as-prototype*))
			 (new-director (if as-prototype
					 (apply (getf ,dir-list dir) args)
					 (funcall (apply (getf ,dir-list dir) args)))
				       :pos (sdl:point :x x :y y)
				       :vel (sdl:point :x vx :y vy)
				       :delay delay))))
	 (let ((*as-prototype* nil))
	   ,@(mapcar #'(lambda (x)
			 `(setf (getf ,dir-list ,(car x))
				#'(lambda (,@(cadr x))
				    #'(lambda ()
					,(caddr x))))) (getf body :directors)))
	 (let ((*as-prototype* t))
	   (setf (@directors ,level) ,(getf body :initial-fn)))
	 ,level))))